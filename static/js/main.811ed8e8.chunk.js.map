{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","options","layout","randomSeed","undefined","improvedLayout","configure","enabled","filter","container","showButton","edges","color","height","graph","nodes","id","label","title","from","to","events","select","event","getNetwork","network","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAmEeA,MA9Df,WACE,IAgBMC,EAAU,CACdC,OAAQ,CACNC,gBAAYC,EACZC,gBAAe,GAcjBC,UAAW,CACTC,SAAS,EACTC,OAAQ,cACRC,eAAWL,EACXM,YAAY,GAEdC,MAAO,CACLC,MAAO,WAETC,OAAQ,SAQV,OACE,kBAAC,IAAD,CACEC,MApDU,CACZC,MAAO,CACL,CAAEC,GAAI,EAAGC,MAAO,OAAQC,MAAO,sBAC/B,CAAEF,GAAI,EAAGC,MAAO,MAAOC,MAAO,sBAC9B,CAAEF,GAAI,EAAGC,MAAO,aAAcC,MAAO,sBACrC,CAAEF,GAAI,EAAGC,MAAO,SAAUC,MAAO,sBACjC,CAAEF,GAAI,EAAGC,MAAO,SAAUC,MAAO,uBAEnCP,MAAO,CACL,CAAEQ,KAAM,EAAGC,GAAI,GACf,CAAED,KAAM,EAAGC,GAAI,GACf,CAAED,KAAM,EAAGC,GAAI,GACf,CAAED,KAAM,EAAGC,GAAI,KAyCfnB,QAASA,EACToB,OATW,CACbC,OAAQ,SAASC,GACQA,EAAjBR,MAAiBQ,EAAVZ,QAQba,WAAY,SAAAC,QCjDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.811ed8e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport Graph from \"react-graph-vis\";\r\nimport './App.css';\r\n// import \"./network.css\";\r\n\r\nfunction App() {\r\n  const graph = {\r\n    nodes: [\r\n      { id: 1, label: \"HTML\", title: \"node 1 tootip text\" },\r\n      { id: 2, label: \"CSS\", title: \"node 2 tootip text\" },\r\n      { id: 3, label: \"JAVASCRIPT\", title: \"node 3 tootip text\" },\r\n      { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\r\n      { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\r\n    ],\r\n    edges: [\r\n      { from: 1, to: 2 },\r\n      { from: 1, to: 3 },\r\n      { from: 2, to: 4 },\r\n      { from: 2, to: 5 }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    layout: {\r\n      randomSeed: undefined,\r\n      improvedLayout:true,\r\n      // hierarchical: {\r\n      //   enabled: true,\r\n      //   levelSeparation: 150,\r\n      //   nodeSpacing: 100,\r\n      //   treeSpacing: 200,\r\n      //   blockShifting: true,\r\n      //   edgeMinimization: true,\r\n      //   parentCentralization: true,\r\n      //   direction: 'UD',        // UD, DU, LR, RL\r\n      //   sortMethod: 'directed',  // hubsize, directed\r\n      //   shakeTowards: 'leaves'  // roots, leaves\r\n      // }\r\n    },\r\n    configure: {\r\n      enabled: true,\r\n      filter: 'nodes,edges',\r\n      container: undefined,\r\n      showButton: true\r\n    },\r\n    edges: {\r\n      color: \"#000000\"\r\n    },\r\n    height: \"500px\",\r\n  };\r\n\r\n  const events = {\r\n    select: function(event) {\r\n      var { nodes, edges } = event;\r\n    }\r\n  };\r\n  return (\r\n    <Graph\r\n      graph={graph}\r\n      options={options}\r\n      events={events}\r\n      getNetwork={network => {\r\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n      }}\r\n    />\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}